"3", "1258",
"3", "201",
"Henry","659",
"Henry", "Rivington",
"Supernode 1", "1384",
"Rivington", "7th St.",
"7th St.", "Pierre",
"Supernode 1", "1147",
"100A", "Rivington",
"Supernode 1", "Domino",
"Domino", "Simona",
"Simona", "1606",
"Simona", "229",
"Simona", "354",
"354", "1923",
"354", "Soft Surplus",
"Soft Surplus", "323",
"Soft Surplus", "2335",
"Soft Surplus", "355",
"Soft Surplus", "1189",
"Soft Surplus", "2287",
"Soft Surplus", "Cypress Inn",
"Cypress Inn", "2071",
"Cypress Inn", "2794",
"Cypress Inn", "2192",
"Cypress Inn", "2098",
"Cypress Inn", "Saratoga",
"Soft Surplus", "Saratoga",
"Saratoga", "Dekalb",
"Dekalb", "1946",
"Saratoga", "Troutman",
"Troutman", "529",
"Saratoga", "1583",
"Saratoga", "1294",
"Saratoga", "1893",
"Saratoga", "324",
"Saratoga", "1524",
"Saratoga", "2148",
"Saratoga", "2058",
"Saratoga", "1659",
"Saratoga", "1599",
"Saratoga", "1533",
"Saratoga", "1825",
"Saratoga", "2387",
"Saratoga", "740",
"Saratoga", "667",
"Saratoga", "2291",
"Saratoga", "2131",
"Saratoga", "2083",
"Saratoga", "1546",
"Saratoga", "1779",
"Saratoga", "627",
"Saratoga", "2174",
"Saratoga", "2647",
"Saratoga", "1776",
"Saratoga", "2039",
"Saratoga", "1085",
"Saratoga", "1795",
"Saratoga", "2101",
"Saratoga", "1710",
"Saratoga", "1862",
"Saratoga", "Ehud",
"Saratoga", "1916",
"Saratoga", "Flo",
"Flo", "760",
"Flo", "2623",
"Saratoga", "Supernode 4",
"Supernode 4", "2596",
"844", "2699",
"844", "2090",
"844", "2223")
# create graph, along with isolate hub & supernode vertices
nycMesh <- graph(edges, isolates = c("Supernode 3", "363", "1126"), directed=FALSE)
# set vertex type. "Active Node" is the most common"
V(nycMesh)$nodeType <- c("Active Node")
vertex_attr(nycMesh, "nodeType", V(nycMesh)["Supernode 1", "Supernode 3", "Supernode 4"]) <- "Supernode"
vertex_attr(nycMesh, "nodeType", V(nycMesh)["1971", "Henry","659","Rivington","1384", "7th St.","Pierre","1147","100A", "Domino", "Simona", "Soft Surplus", "Cypress Inn", "Saratoga", "Dekalb", "Troutman", "Ehud", "1916", "Flo", "844", "363", "1126"]) <- "Hub"
# set display size of vertices
V(nycMesh)$size=degree(nycMesh)/1.5
# output network as graph
plot(nycMesh,
frame.color="white",
vertex.color="skyblue",
vertex.frame.color=NA,
edge.color="grey",
vertex.label.family="Inconsolata",
vertex.label.cex=.6,
width=20)
print("This graph is a representation of the mesh network being built by the NYC Mesh organization, as recorded on Jan. 28th, 2019 on at https://www.nycmesh.net/map/. Each vertex represents a router node that is connected to the mesh network through dish or antenna installations. The 'supernodes' have reserved space on internet-exchange cables that allow the mesh network to connect to the larger Internet. Each edge is an explicit 'over-the-air' connections made between nodes. Other network connections through simple proximity or through the city's LinkNYC kiosks are not represented. This data does not represent the geographical proximity of vertices or components, merely whether nodes are attached to the NYC mesh network at all. Isolated smaller nodes (that can 'tunnel' through the Internet to access the mesh) have not been included in the graph, although they represent approximately half the overall nodes in the network.")
# print underlying matrices
options(max.print= 10000, width = 10000)
print(as_adjacency_matrix(nycMesh))
print(as_edgelist(nycMesh))
library(ergm)
data("florentine")
detach(package:ergm)
detach(package:network)
require(intergraph)
require(igraph)
flo_m<-asIgraph(flomarriage)
flo_b<-asIgraph(flobusiness)
degree(flo_m)
degree(flo_b)
marriageDegree <- degree(flo_m)
businessDegree <- degree(flo_b)
marriageEigenvector <- evcent(flo_m)$vector
businessEigenvector <- evcent(flo_b)$vector
marriageBetweenness <- betweeness(floMarriage)
businessBetweenness <- betweeness(floBusiness)
marriageBetweenness <- betweenness(floMarriage)
businessBetweenness <- betweenness(floBusiness)
marriageBetweenness <- betweenness(floMarriage)
library(ergm)
data("florentine")
detach(package:ergm)
detach(package:network)
require(intergraph)
require(igraph)
floMarriage <- asIgraph(flomarriage)
floBusiness <- asIgraph(flobusiness)
marriageDegree <- degree(floMarriage)
businessDegree <- degree(floBusiness)
marriageEigenvector <- evcent(floMarriage)$vector
businessEigenvector <- evcent(floBusiness)$vector
marriageBetweenness <- betweenness(floMarriage)
businessBetweenness <- betweenness(floBusiness)
marriageBetweenness <- betweenness(floMarriage)
marriageCloseness <- closeness(floMarriage)
businessCloseness <- closeness(floBusiness)
florenceCentrality <- data.frame(marriageDegree, marriageEigenvector, marriageBetweenness, marriageCloseness, businessDegree, businessEigenvector, businessCloseness, businessBetweenness)
print(florenceCentrality)
cor(florenceCentrality)
florenceCentrality <- data.frame(marriageDegree, marriageEigenvector, marriageBetweenness, marriageCloseness, businessDegree, businessEigenvector, businessBetweenness, businessCloseness)
cor(florenceCentrality)
florenceCentrality <- data.frame(mDegree, mEigenvector, mBetweenness, mCloseness, bDegree, bEigenvector, bBetweenness, bCloseness)
library(ergm)
data("florentine")
detach(package:ergm)
detach(package:network)
require(intergraph)
require(igraph)
floMarriage <- asIgraph(flomarriage)
floBusiness <- asIgraph(flobusiness)
mDegree <- degree(floMarriage)
bDegree <- degree(floBusiness)
mEigenvector <- evcent(floMarriage)$vector
bEigenvector <- evcent(floBusiness)$vector
mBetweenness <- betweenness(floMarriage)
bBetweenness <- betweenness(floBusiness)
# Warning when running this closeness centrality measure is because there are isolate nodes in this graph. Closeness requires that there be some finite number of steps that connects every node in a graph to every other node. For isolates, that distance is an infinite number, which the algorithm cannot deal with.
mCloseness <- closeness(floMarriage)
bCloseness <- closeness(floBusiness)
florenceCentrality <- data.frame(mDegree, mEigenvector, mBetweenness, mCloseness, bDegree, bEigenvector, bBetweenness, bCloseness)
cor(florenceCentrality)
plot(floMarriage)
floMarriage
vertex_attr(floBusiness)
vertex_attr(floMarriage)
closeness(floMarriage)
mDegree
bCloseness
mDegree
bDegree #
vertex.attributes(floBusiness)
bDegree #
mEigenvector
vertex.attributes(floMarriage)
mEigenvector
bEigenvector
bDegree # The Medici family has the highest business degree (5)
mBetweenness
bBetweenness
mCloseness
bCloseness
plot(floMarriage)
plot(floMarriage, label=vertex.names)
plot(floMarriage, label="vertex.names")
plot(floMarriage, label="vertex.names")
plot(floMarriage, vertex.label=vertex.names)
plot(floMarriage, vertex.label=vertex.names)
plot(floMarriage, vertex.label=names)
plot(floMarriage, vertex.label=names)
plot(floMarriage, vertex.label=vertex.names)
plot(floMarriage, vertex.label="vertex.names")
plot(floMarriage,
frame.color="white",
vertex.color="skyblue",
vertex.frame.color=NA,
edge.color="grey",
vertex.label.family="Inconsolata",
vertex.label.cex=.6,
width=20)
plot(floMarriage,
frame.color="white",
vertex.color="skyblue",
vertex.frame.color=NA,
vertex.label=vertex_attr_names(),
edge.color="grey",
vertex.label.family="Inconsolata",
vertex.label.cex=.6,
width=20)
plot(floMarriage,
frame.color="white",
vertex.color="skyblue",
vertex.frame.color=NA,
vertex.label=vertex.names,
edge.color="grey",
vertex.label.family="Inconsolata",
vertex.label.cex=.6,
width=20)
plot(floMarriage,
frame.color="white",
vertex.color="skyblue",
vertex.frame.color=NA,
vertex.label=V(floMarriage)$vertex.names,
edge.color="grey",
vertex.label.family="Inconsolata",
vertex.label.cex=.6,
width=20)
V(floMarriage)$size = closeness(floMarriage)
plot(floMarriage,
frame.color="white",
vertex.color="skyblue",
vertex.frame.color=NA,
vertex.label=V(floMarriage)$vertex.names,
edge.color="grey",
vertex.label.family="Inconsolata",
vertex.label.cex=.6,
width=20)
plot(floMarriage,
frame.color="white",
vertex.color="skyblue",
vertex.frame.color=NA,
vertex.label=V(floMarriage)$vertex.names,
edge.color="grey",
vertex.label.family="Inconsolata",
vertex.label.cex=.6,
width=20)
V(floMarriage)$size =
plot(floMarriage,
frame.color="white",
vertex.color="skyblue",
vertex.frame.color=NA,
vertex.label=V(floMarriage)$vertex.names,
vertex.size=closeness(floMarriage)
edge.color="grey",
vertex.label.family="Inconsolata",
vertex.label.cex=.6,
width=20)
V(floMarriage)$size =
plot(floMarriage,
frame.color="white",
vertex.color="skyblue",
vertex.frame.color=NA,
vertex.label=V(floMarriage)$vertex.names,
vertex.size=closeness(floMarriage),
edge.color="grey",
vertex.label.family="Inconsolata",
vertex.label.cex=.6,
width=20)
V(floMarriage)$size =
plot(floMarriage,
frame.color="white",
vertex.color="skyblue",
vertex.frame.color=NA,
vertex.label=V(floMarriage)$vertex.names,
vertex.size=betweenness(floMarriage),
edge.color="grey",
vertex.label.family="Inconsolata",
vertex.label.cex=.6,
width=20)
plot(floMarriage,
frame.color="white",
vertex.color="skyblue",
vertex.frame.color=NA,
vertex.label=V(floMarriage)$vertex.names,
vertex.size=evcent(floMarriage)$vector,
edge.color="grey",
vertex.label.family="Inconsolata",
vertex.label.cex=.6,
width=20)
plot(floMarriage,
frame.color="white",
vertex.color="skyblue",
vertex.frame.color=NA,
vertex.label=V(floMarriage)$vertex.names,
vertex.size=degree(floMarriage),
edge.color="grey",
vertex.label.family="Inconsolata",
vertex.label.cex=.6,
width=20)
plot(floMarriage,
frame.color="white",
vertex.color="skyblue",
vertex.frame.color=NA,
vertex.label=V(floMarriage)$vertex.names,
vertex.size=degree(floMarriage),
edge.color="grey",
vertex.label.family="Inconsolata",
vertex.label.cex=.6,
width=20)
plot(floMarriage,
frame.color="white",
vertex.color="skyblue",
vertex.frame.color=NA,
vertex.label=V(floMarriage)$vertex.names,
vertex.size=evcent(floMarriage)$vector,
edge.color="grey",
vertex.label.family="Inconsolata",
vertex.label.cex=.6,
width=20)
plot(floMarriage,
frame.color="white",
vertex.color="skyblue",
vertex.frame.color=NA,
vertex.label=V(floMarriage)$vertex.names,
vertex.size=evcent(floMarriage)$vector*8,
edge.color="grey",
vertex.label.family="Inconsolata",
vertex.label.cex=.6,
width=20)
plot(floMarriage,
frame.color="white",
vertex.color="skyblue",
vertex.frame.color=NA,
vertex.label=V(floMarriage)$vertex.names,
vertex.size=evcent(floMarriage)$vector*10,
edge.color="grey",
vertex.label.family="Inconsolata",
vertex.label.cex=.6,
width=20)
plot(floMarriage,
frame.color="white",
vertex.color="skyblue",
vertex.frame.color=NA,
vertex.label=V(floMarriage)$vertex.names,
vertex.size=evcent(floMarriage)$vector*20,
edge.color="grey",
vertex.label.family="Inconsolata",
vertex.label.cex=.6,
width=20)
plot(floMarriage,
frame.color="white",
vertex.color="skyblue",
vertex.frame.color=NA,
vertex.label=V(floMarriage)$vertex.names,
vertex.size=betweenness(floMarriage),
edge.color="grey",
vertex.label.family="Inconsolata",
vertex.label.cex=.6,
width=20)
plot(floMarriage,
frame.color="white",
vertex.color="skyblue",
vertex.frame.color=NA,
vertex.label=V(floMarriage)$vertex.names,
vertex.size=evcent(floMarriage)$vector*20,
edge.color="grey",
vertex.label.family="Inconsolata",
vertex.label.cex=.6,
width=20)
mBetweenness # The Medici family has the highest marriage betweenness measure (47.500000)
plot(floMarriage,
frame.color="white",
vertex.color="skyblue",
vertex.frame.color=NA,
vertex.label=V(floMarriage)$vertex.names,
vertex.size=betweenness(floMarriage),
edge.color="grey",
vertex.label.family="Inconsolata",
vertex.label.cex=.6,
width=20)
vertex.attributes(floMarriage)
mBetweenness # The Medici family has the highest marriage betweenness measure (47.500000)
plot(floMarriage,
frame.color="white",
vertex.color="skyblue",
vertex.frame.color=NA,
vertex.label=V(floMarriage)$vertex.names,
vertex.size=evcent(floMarriage)$vector*20,
edge.color="grey",
vertex.label.family="Inconsolata",
vertex.label.cex=.6,
width=20)
plot(floMarriage,
frame.color="white",
vertex.color="skyblue",
vertex.frame.color=NA,
vertex.label=V(floMarriage)$vertex.names,
vertex.size=betweenness(floMarriage),
edge.color="grey",
vertex.label.family="Inconsolata",
vertex.label.cex=.6,
width=20)
plot(floMarriage,
frame.color="white",
vertex.color="skyblue",
vertex.frame.color=NA,
vertex.label=V(floMarriage)$vertex.names,
vertex.size=evcent(floMarriage)$vector*20,
edge.color="grey",
vertex.label.family="Inconsolata",
vertex.label.cex=.6,
width=20)
require(NetCluster)
install.packages("NetCluster")
install.packages(c("gplots", "igraph"))
require(NetCluster)
require(gplots)
require(igraph)
setwd("~/Desktop/Projects/my461-socialnetworkanalysis")
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
summary(cars)
knitr::opts_chunk$set(echo = TRUE)
View(flo_m)
require(NetCluster)
require(gplots)
require(igraph)
require(NetCluster)
require(gplots)
require(igraph)
require(NetCluster)
require(gplots)
require(igraph)
require(NetCluster)
require(gplots)
require(igraph)
require(NetCluster)
require(gplots)
require(igraph)
require(NetCluster)
require(gplots)
require(igraph)
require(NetCluster)
require(gplots)
require(igraph)
require(NetCluster)
require(gplots)
require(igraph)
library(NetCluster)
require(gplots)
require(igraph)
library(NetCluster)
require(gplots)
require(igraph)
library(NetCluster)
require(gplots)
require(igraph)
require(NetCluster)
require(gplots)
require(igraph)
vertex_attr(swn)
plot(swn,
frame.color="white",
vertex.frame.color="darkgrey",
vertex.color=V(dixon)$type,
vertex.size=degree(swn)*1.5,
edge.color="grey",
vertex.label.family="Inconsolata",
vertex.label.cex=.8)
cor(swi)
---
title: "LT4 Problem Set"
output: html_document
candidateID: 15146
---
Install necessary package dependencies for analysis
```{r message=FALSE}
require(NetCluster)
require(gplots)
require(igraph)
```
Load in csv data to work with
```{r}
swi <- read.csv("swn.csv",header=TRUE,row.names=1)
swi <- as.matrix(swi)
swn <- graph.incidence(swi)
vertex_attr(swn)
plot(swn,
frame.color="white",
vertex.frame.color="darkgrey",
vertex.color=V(swn)$type+1,
vertex.size=degree(swn)*1.5,
edge.color="grey",
vertex.label.family="Inconsolata",
vertex.label.cex=.8)
```
Building bipartite projection of event types & then displaying projection focusing on women participating in events
```{r}
swpr=bipartite.projection(swn)
plot(swpr$proj2,
edge.width=E(swpr$proj2)$weight,
frame.color="white",
vertex.frame.color="darkgrey",
vertex.color=1,
edge.color="grey",
vertex.label.family="Inconsolata",
vertex.label.cex=.8)
```
```
cor(swi)
View(swi)
View(swi)
t(swi)
cor(swi)
heatmap.2(as.matrix(as.dist(1-cor(swi))),trace="none",revC=TRUE)
cor(swi)
as.dist(1-cor(swi),upper=FALSE)
swdend<-hclust(as.dist(1-cor(swi)))
plot(swdend)
heatmap.2(as.matrix(as.dist(1-cor(swi))),trace="none",revC=TRUE)
